"""
Script de prueba para verificar la configuraci√≥n del Discord Bot

Este script verifica que la configuraci√≥n est√© correcta antes de ejecutar el bot.
"""

import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

def test_configuration():
    """Prueba la configuraci√≥n del bot."""
    print("üîç Verificando configuraci√≥n del Discord Bot...")
    
    # Test 1: Variables de entorno
    print("\n1. Verificando variables de entorno...")
    try:
        from app.discord_bot.config import DISCORD_TOKEN, COMMAND_PREFIX
        
        if DISCORD_TOKEN:
            print(f"   ‚úÖ DISCORD_TOKEN: Configurado (longitud: {len(DISCORD_TOKEN)})")
        else:
            print("   ‚ùå DISCORD_TOKEN: No configurado")
            return False
            
        print(f"   ‚úÖ COMMAND_PREFIX: {COMMAND_PREFIX}")
        
    except Exception as e:
        print(f"   ‚ùå Error cargando configuraci√≥n: {e}")
        return False
    
    # Test 2: Importar m√≥dulos
    print("\n2. Verificando m√≥dulos...")
    try:
        import discord
        print(f"   ‚úÖ discord.py: {discord.__version__}")
        
        from app.discord_bot.bot import IthakaBot
        print("   ‚úÖ IthakaBot: Importado correctamente")
        
        from app.discord_bot.responses import get_contextual_response
        print("   ‚úÖ M√≥dulo de respuestas: Importado correctamente")
        
    except Exception as e:
        print(f"   ‚ùå Error importando m√≥dulos: {e}")
        return False
    
    # Test 3: Respuestas b√°sicas
    print("\n3. Verificando sistema de respuestas...")
    try:
        response = get_contextual_response("hola")
        print(f"   ‚úÖ Respuesta de prueba: {response[:50]}...")
        
    except Exception as e:
        print(f"   ‚ùå Error en sistema de respuestas: {e}")
        return False
    
    # Test 4: Instanciar bot (sin conectar)
    print("\n4. Verificando instancia del bot...")
    try:
        bot = IthakaBot()
        print(f"   ‚úÖ Bot instanciado: {bot.__class__.__name__}")
        print(f"   ‚úÖ Prefijo de comandos: {bot.command_prefix}")
        
    except Exception as e:
        print(f"   ‚ùå Error instanciando bot: {e}")
        return False
    
    print("\n‚úÖ Todas las verificaciones pasaron correctamente!")
    print("\nüìã Informaci√≥n del bot:")
    print(f"   ‚Ä¢ Prefijo de comandos: {COMMAND_PREFIX}")
    print(f"   ‚Ä¢ Token configurado: {'S√≠' if DISCORD_TOKEN else 'No'}")
    print(f"   ‚Ä¢ Version discord.py: {discord.__version__}")
    
    print("\nüöÄ El bot est√° listo para ejecutarse!")
    print("   Para ejecutar: python app/discord_bot/main.py")
    
    return True

def test_token_validity():
    """Prueba si el token es v√°lido (sin conectar)."""
    print("\nüîë Verificando formato del token...")
    
    from app.discord_bot.config import DISCORD_TOKEN
    
    if not DISCORD_TOKEN:
        print("   ‚ùå Token no configurado")
        return False
    
    # Verificar formato b√°sico del token
    parts = DISCORD_TOKEN.split('.')
    if len(parts) != 3:
        print("   ‚ö†Ô∏è  Formato de token inv√°lido (debe tener 3 partes separadas por puntos)")
        return False
    
    print("   ‚úÖ Formato de token parece v√°lido")
    print("   ‚ÑπÔ∏è  Para verificar completamente, ejecuta el bot y verifica la conexi√≥n")
    
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("ü§ñ VERIFICACI√ìN DE CONFIGURACI√ìN - ITHAKA DISCORD BOT")
    print("=" * 60)
    
    success = test_configuration()
    
    if success:
        test_token_validity()
        print("\n" + "=" * 60)
        print("‚úÖ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE")
        print("=" * 60)
        
        print("\nüìñ Pr√≥ximos pasos:")
        print("1. Invita el bot a tu servidor de Discord")
        print("2. Ejecuta: python app/discord_bot/main.py")
        print("3. Prueba los comandos en Discord")
        
    else:
        print("\n" + "=" * 60)
        print("‚ùå CONFIGURACI√ìN INCOMPLETA")
        print("=" * 60)
        print("\nüîß Por favor, revisa los errores anteriores y:")
        print("1. Configura DISCORD_TOKEN en el archivo .env")
        print("2. Verifica que todas las dependencias est√©n instaladas")
        print("3. Vuelve a ejecutar este script")
